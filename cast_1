package com.examplee.votinga;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.storage.FileDownloadTask;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

public class cast_1 extends RecyclerView.Adapter {
    private ArrayList<cast_voting> dataSet;
    Context mContext;
    int total_types;



    public static class ImageTypeViewHolder extends RecyclerView.ViewHolder {

        TextView txtType;

        ImageView image;
        ImageView show_poster;
ImageView show_profile;
        ImageView call;
        ImageView  mesg;
      //  ImageView  vpoting;

        public ImageTypeViewHolder(View itemView) {
            super(itemView);

            this.txtType = (TextView) itemView.findViewById(R.id.type);
            this.show_poster = (ImageView) itemView.findViewById(R.id.show_poster);

            this.mesg = (ImageView) itemView.findViewById(R.id.mesg);
            this.call = (ImageView) itemView.findViewById(R.id.call);
       //     this.vpoting = (ImageView) itemView.findViewById(R.id.vpoting);
            this.show_profile = (ImageView) itemView.findViewById(R.id.show_profile);
            this.image = (ImageView) itemView.findViewById(R.id.background);




        }
    }



    public cast_1(ArrayList<cast_voting> data, Context context) {
        this.dataSet = data;
        this.mContext = context;
        total_types = dataSet.size();
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

        View view;
        switch (viewType) {

            case cast_voting.IMAGE_TYPE:
                view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item4, parent, false);
                return new ImageTypeViewHolder(view);

        }
        return null;
    }

    @Override
    public int getItemViewType(int position) {

        switch (dataSet.get(position).type) {

            case 1:
                return cast_voting.IMAGE_TYPE;

            default:
                return -1;
        }
    }

    @Override
    public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int listPosition) {

        final cast_voting object = dataSet.get(listPosition);
        if (object != null) switch (object.type) {

               case cast_voting.IMAGE_TYPE:
                   ((ImageTypeViewHolder) holder).txtType.setText(object.text);
                   FirebaseStorage storage = FirebaseStorage.getInstance();

                   StorageReference storageRef = storage.getReference();
                   final StorageReference imageRef = storageRef.child("images/" + object.obj.getFirbase_id()+"adv");
                   try {
                       final File localFile = File.createTempFile("images", "jpg");
                       imageRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
                           @Override
                           public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
                               Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
                               ((ImageTypeViewHolder) holder).image.setImageBitmap(bitmap);

                           }
                       }).addOnFailureListener(new OnFailureListener() {
                           @Override
                           public void onFailure(@NonNull Exception exception) {
                               Toast.makeText(mContext, imageRef.toString() + "", Toast.LENGTH_SHORT).show();

                           }
                       });
                   } catch (IOException e) {
                   }
                   ((ImageTypeViewHolder) holder).call.setOnClickListener(new View.OnClickListener() {

                       public void onClick(View view) {


                               String phone = object.obj.phone2;
                               Intent intent = new Intent(Intent.ACTION_DIAL, Uri.fromParts("tel", phone, null));
                               mContext.startActivity(intent);




                       }
                   });
                   ((ImageTypeViewHolder) holder).mesg.setOnClickListener(new View.OnClickListener() {

                       public void onClick(View view) {
                           if(object.voting_from ==1){
                               final View dialogView;

                               dialogView = View.inflate(mContext, R.layout.admin_messg, null);

                               final AlertDialog alertDialog = new AlertDialog.Builder(mContext).create();
                               final EditText ti=dialogView.findViewById(R.id.editText6);
                               final EditText text=dialogView.findViewById(R.id.editText7);
                               ImageButton bb= dialogView.findViewById(R.id.imageButton5);
                               ImageButton bb2= dialogView.findViewById(R.id.imageButton4);
                               bb .setOnClickListener(new View.OnClickListener() {

                                   public void onClick(View view) {
                                       alertDialog.dismiss();
                                   }});
                               bb2. setOnClickListener(new View.OnClickListener() {

                                   public void onClick(View view) {
                                       Chating c=new Chating();
                                       c.title=ti.getText().toString();
                                       c.text=text.getText().toString();
                                       c.type=2;
                                       c.voter_ =object.voter_;
                                       c.candidate =object.obj;
                                       DatabaseReference     D= FirebaseDatabase.getInstance().getReference("Database").child("complaints");
                                       c.at=new Date();
                                       String id=D.push().getKey();
                                       c.id_data=id;
                                       D.child(id).setValue(c);
                                       Toast.makeText(mContext, "Saved", Toast.LENGTH_SHORT).show();

                                       alertDialog.dismiss();

                                   }});
                               alertDialog.setView(dialogView);
                               alertDialog.show();
                           }
                           if(object.voting_from ==2){
                               Toast.makeText(mContext, "Only Voter can send", Toast.LENGTH_SHORT).show();
                           }

                       }
                   });
                /*   ((ImageTypeViewHolder) holder).vpoting.setOnClickListener(new View.OnClickListener() {

                       public void onClick(View view) {
                          if(object.cast_by==1){
                              DatabaseReference   mFirebaseDatabase= FirebaseDatabase.getInstance().getReference("Database").child("candidate");
                              DatabaseReference   mFirebaseDatabase2= FirebaseDatabase.getInstance().getReference("Database").child("voter2");

                              object.how.has_been_voteing=true;
                              mFirebaseDatabase2.child(object.how.data_base_id).setValue( object.how);
                              object.std.vote_count++;
                              mFirebaseDatabase.child(object.std.firbase_id).child("vote_count").setValue(object.std.vote_count);

                          }
                           if(object.cast_by==2){
                               DatabaseReference   mFirebaseDatabase= FirebaseDatabase.getInstance().getReference("Database").child("candidate");

                               object.how2.has_been_voteing=true;
                               mFirebaseDatabase.child(object.how2.firbase_id).setValue( object.how2);
                               object.std.vote_count++;
                               mFirebaseDatabase.child(object.std.firbase_id).child("vote_count").setValue(object.std.vote_count);
                           }

                       }
                   });*/
                   ((ImageTypeViewHolder) holder).show_poster.setOnClickListener(new View.OnClickListener() {

                       public void onClick(View view) {
                           FirebaseStorage storage = FirebaseStorage.getInstance();

                           StorageReference storageRef = storage.getReference();
                           final StorageReference imageRef = storageRef.child("images/" + object.obj.getFirbase_id()+"adv");
                           try {
                               final File localFile = File.createTempFile("images", "jpg");
                               imageRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
                                   @Override
                                   public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
                                       Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
                                       ((ImageTypeViewHolder) holder).image.setImageBitmap(bitmap);

                                   }
                               }).addOnFailureListener(new OnFailureListener() {
                                   @Override
                                   public void onFailure(@NonNull Exception exception) {
                                       Toast.makeText(mContext, imageRef.toString() + "", Toast.LENGTH_SHORT).show();

                                   }
                               });
                           } catch (IOException e) {
                           }

                       }
                   });
                   ((ImageTypeViewHolder) holder).show_profile.setOnClickListener(new View.OnClickListener() {

                       public void onClick(View view) {
                           FirebaseStorage storage = FirebaseStorage.getInstance();

                           StorageReference storageRef = storage.getReference();
                           final StorageReference imageRef = storageRef.child("images/" + object.obj.getFirbase_id());
                           try {
                               final File localFile = File.createTempFile("images", "jpg");
                               imageRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
                                   @Override
                                   public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
                                       Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
                                       ((ImageTypeViewHolder) holder).image.setImageBitmap(bitmap);

                                   }
                               }).addOnFailureListener(new OnFailureListener() {
                                   @Override
                                   public void onFailure(@NonNull Exception exception) {
                                       Toast.makeText(mContext, imageRef.toString() + "", Toast.LENGTH_SHORT).show();

                                   }
                               });
                           } catch (IOException e) {
                           }

                       }
                   });


                break;

        }
    }

    @Override
    public int getItemCount() {
        return dataSet.size();
    }

}
